<div id="chart" class="hide-for-small"></div>

<% content_for :custom_js do %>
  <% if @sprints.finished.statistically_significant(@project).any? %>
    var data = <%= @sprints.finished.statistically_significant(@project).map{|s| {:end_at => s.end_at.iso8601, :velocity => s.calculated_velocity}}.to_json.html_safe %>;
    var average = [{"end_at": "<%= @sprints.finished.statistically_significant(@project).first.end_at.iso8601 %>", "velocity": <%= @velocity %>}, {"end_at": "<%= @sprints.finished.statistically_significant(@project).last.end_at.iso8601 %>", "velocity": <%= @velocity %>}];

    var margin = {top: 20, right: 20, bottom: 30, left: 50},
        width = 1200 - margin.left - margin.right,
        height = 300 - margin.top - margin.bottom;

    var x = d3.time.scale()
              .range([0, width]);

    var y = d3.scale.linear()
              .range([height, 0]);


    var xAxis = d3.svg.axis()
                  .scale(x)
                  .orient("bottom");

    var yAxis = d3.svg.axis()
                  .scale(y)
                  .orient("left");

    var iso = d3.time.format.utc("%Y-%m-%dT%H:%M:%SZ");
    var parseDate = iso.parse;

    data.forEach(function(d) {
      d.end_at = parseDate(d.end_at);
      d.velocity = +d.velocity;
    });
    average.forEach(function(d) {
      d.end_at = parseDate(d.end_at);
      d.velocity = +d.velocity;
    });

    var line = d3.svg.line()
                .x(function(d) { return x(d.end_at); })
                .y(function(d) { return y(d.velocity); });

    var mySVG = d3.select("#chart")
                  .append("svg")
                    .attr("width", "100%")
                    .attr("height", "320")
                    .attr("viewBox", "0 0 1200 320")
                    .attr("preserveAspectRatio", "xMinYMax meet")
                  .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    x.domain(d3.extent(data, function(d) { return d.end_at; }));
    y.domain(d3.extent(data, function(d) { return d.velocity; }))

    mySVG.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")

        .call(xAxis);

    mySVG.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Velocity");

    mySVG.append("path")
        .datum(data)
        .attr("class", "line-velocity")
        .attr("d", line);

    mySVG.append("path")
        .datum(average)
        .attr("class", "line-avg")
        .attr("d", line);
  <% end %>
<% end %>
